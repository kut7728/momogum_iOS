//
//  AppointViewModel.swift
//  momogum
//
//  Created by nelime on 1/21/25.
//

import SwiftUI
import Alamofire


// MARK: - api ÏùëÎãµ ÌÜµÌï© Íµ¨Ï°∞Ï≤¥
struct ApiResponse<T: Codable>: Codable {
    let isSuccess: Bool
    let code, message: String
    let result: T
}

// MARK: - ÏïΩÏÜç Í≥†Ïú† ID Î∞úÍ∏â Íµ¨Ï°∞Ï≤¥
struct ApmUUID: Codable {
    let appointmentID: Int
    
    enum CodingKeys: String, CodingKey {
        case appointmentID = "appointmentId"
    }
}



// MARK: - class
@Observable
class NewAppointViewModel {
    let userId: Int = AuthManager.shared.UUID ?? 9
    var appointId: Int = 0
    /// ÏïΩÏÜç 7ÏöîÏÜå
    var appointName: String = ""
    var menuName: String = ""
    var pickedDate: Date = Date()
    var placeName: String = ""
    var note: String = ""
    
    var pickedFriends: [Friend] = []
    var pickedCard: String = ""
    
    /// Ï†ÑÏ≤¥ ÏπúÍµ¨ Î™©Î°ù
    var friends: [Friend] = []
    
    var newAppoint: Appoint?
    
    // MARK: - ÏïΩÏÜç Í≥†Ïú† id ÌöçÎìù
    func getAppointId() async -> Void {
        let url = "\(BaseAPI)/appointment/init"
        
        do {
            self.appointId = try await withCheckedThrowingContinuation { continuation in
                AF.request(url, method: .post)
                    .validate(statusCode: 200..<300)
                    .responseDecodable(of: ApiResponse<ApmUUID>.self) { response in
                        
                        switch response.result {
                        case .success(let data):
                            continuation.resume(returning: data.result.appointmentID)
                            print("ÏïΩÏÜç Í≥†Ïú† Id : \(data.result.appointmentID)")
                            if let data = response.data, let jsonString = String(data: data, encoding: .utf8) {
                                print("üìå ÏÑúÎ≤ÑÏóêÏÑú Î∞õÏùÄ ÏõêÎ≥∏ JSON (ÎîîÏΩîÎî© Ïã§Ìå® ÏõêÏù∏ ÌôïÏù∏Ïö©):\n\(jsonString)")
                            }
                        case .failure(let error):
                            continuation.resume(throwing: error)
                        }
                    }
            }
        } catch {
            print("ÏïΩÏÜç id POST Ïò§Î•ò: \(error.localizedDescription)")
        }
    }
    
    // MARK: - Ï¥àÎåÄ Í∞ÄÎä•Ìïú ÏπúÍµ¨ Î™©Î°ù Î∞òÌôò
    func getAvailableFriends() async -> Void {
        let url = "\(BaseAPI)/appointment/\(self.appointId)/invites?userId=9"
        
        do {
            self.friends = try await withCheckedThrowingContinuation {continuation in
                AF.request(url, method: .get)
                    .validate(statusCode: 200..<300)
                    .responseDecodable(of: [Friend].self) { response in
                        
                        switch response.result {
                        case .success(let data):
                            continuation.resume(returning: data)
                            
                        case .failure(let error):
                            print("Ï¥àÎåÄ Í∞ÄÎä•Ìïú ÏπúÍµ¨ Î™©Î°ù Î∞òÌôò Ïò§Î•ò \(response)")
                            continuation.resume(throwing: error)
                        }
                    }
                
            }
        } catch {
            print("Ï¥àÎåÄ Í∞ÄÎä• ÏπúÍµ¨ GET Ïò§Î•ò: \(error.localizedDescription)")
            let tempImage = "https://momogum-bucket.s3.ap-northeast-2.amazonaws.com/basic_profile/default_image.png"
            self.friends = [
                Friend(nickname: "FrontHeadlock", name: "ÎçïÍ∑ú", userId: 14, profileImage: tempImage, status: "Pending"),
                Friend(nickname: "kut7728", name: "Ïø†Ìä∏", userId: 12, profileImage: tempImage, status: "Pending"),
                Friend(nickname: "hira1n", name: "ÏÑ∏ÏÑ¨", userId: 13, profileImage: tempImage, status: "Pending"),
                Friend(nickname: "yun_206", name: "ÎèÑÎ¶¨", userId: 11, profileImage: tempImage, status: "Pending"),
                Friend(nickname: "meoraeng", name: "Î®∏Îû≠", userId: 10, profileImage: tempImage, status: "Pending"),
                Friend(nickname: "yawn11", name: "ÌîΩÏä§", userId: 9, profileImage: "https://s3.ap-northeast-2.amazonaws.com/momogum-bucket/user-profile-images/c92dba64-1b6a-45cf-93d6-01e602e3b6bc-%E1%84%91%E1%85%B5%E1%86%A8%E1%84%89%E1%85%B3.jpeg", status: "Pending")
            ]
        }
    }
    
    
    // MARK: - Ï¥àÎåÄÏû• Î∞úÏÜ° Î∞è Ï†ÄÏû•ÏÜå Ï¥àÍ∏∞Ìôî
    func createAppoint() {
        let dateFormatter = ISO8601DateFormatter()
        dateFormatter.formatOptions = [.withInternetDateTime, .withFractionalSeconds]
        //        dateFormatter.timeZone = TimeZone(identifier: "Asia/Seoul")
        let dateString = dateFormatter.string(from: self.pickedDate)  // ÌòÑÏû¨ ÏãúÍ∞ÑÏùÑ ISO 8601 ÌòïÏãù Î¨∏ÏûêÏó¥Î°ú Î≥ÄÌôò
        
        var pickedCardUrl: String {
            switch self.pickedCard {
            case "basic01.png" :
                return "https://momogum-bucket.s3.ap-northeast-2.amazonaws.com/basic/basic01.png"

            case "basic02.png" :
                return "https://momogum-bucket.s3.ap-northeast-2.amazonaws.com/basic/basic02.png"

            case "basic03.png" :
                return "https://momogum-bucket.s3.ap-northeast-2.amazonaws.com/basic/basic03.png"

            case "fun01.png" :
                return "https://momogum-bucket.s3.ap-northeast-2.amazonaws.com/basic/fun01.png"

            case "fun02.png" :
                return "https://momogum-bucket.s3.ap-northeast-2.amazonaws.com/basic/fun02.png"

            case "fun3.png" :                
                return "https://momogum-bucket.s3.ap-northeast-2.amazonaws.com/basic/fun3.png"

                
            case "event1.png" :
                return "https://momogum-bucket.s3.ap-northeast-2.amazonaws.com/basic/event1.png"
                
            case "event2.png" :
                return "https://momogum-bucket.s3.ap-northeast-2.amazonaws.com/basic/event2.png"

            case "event3.png" :
                return "https://momogum-bucket.s3.ap-northeast-2.amazonaws.com/basic/event3.png"
            
            default:
                return "https://momogum-bucket.s3.ap-northeast-2.amazonaws.com/basic/event2.png"

            }
        }
        
        let mainRequest = AppointmentName(
            name: self.appointName,
            menu: self.menuName,
            date: dateString,
            location: self.placeName,
            notes: self.note)
        
        let parm = NewApmRequest(userId: self.userId,
                                 appointmentId: self.appointId,
                                 userIds: self.pickedFriends.map { $0.userId ?? 0 },
                                 cardCategory: "BASIC",
                                 selectedCardUrl: pickedCardUrl,
                                 appointmentName: mainRequest)
        
        
        let url = "\(BaseAPI)/appointment/whole"
        
        AF.request(url,
                   method: .post,
                   parameters: parm,
                   encoder: JSONParameterEncoder.default,
                   headers: ["Content-Type": "application/json", "Accept": "application/json"])
        
        
        .responseData { response in
            switch response.result {
            case .success(let data):
                // UTF-8Î°ú Î≥ÄÌôò
                if let utf8String = String(data: data, encoding: .utf8),
                   let utf8Data = utf8String.data(using: .utf8) {
                    do {
                        let decodedResponse = try JSONDecoder().decode(AppointCreateResponse.self, from: utf8Data)
                        print("‚úÖ ÏÉà ÏïΩÏÜç Î°úÎî© api - UTF-8 Î≥ÄÌôò ÌõÑ ÎîîÏΩîÎî© ÏÑ±Í≥µ")
                        
                        self.newAppoint = Appoint(from: decodedResponse)
                        self.resetAppoint()
                        //                            print("‚ö†Ô∏è ÏÉà ÏïΩÏÜç Î°úÎî© ÏùëÎãµ: \(decodedResponse)")
                        
                    } catch {
                        print("‚ö†Ô∏è ÏÉà ÏïΩÏÜç Î°úÎî© JSON ÎîîÏΩîÎî© Ïã§Ìå®: \(error)")
                        print(" JSON ÎîîÏΩîÎî© Ïã§Ìå® Îç∞Ïù¥ÌÑ∞ Í∞í: \(utf8String)")
                    }
                } else {
                    print("‚ùå ÏÉà ÏïΩÏÜç Î°úÎî© UTF-8 Î≥ÄÌôò Ïã§Ìå®")
                }
                
            case .failure(let error):
                print("‚ùå ÏöîÏ≤≠ Ïã§Ìå®: \(error.localizedDescription)")
                return
            }
        }
    }
    
    
    
    // MARK: - ÏÉà ÏïΩÏÜçÏû°Í∏∞Î•º Ï∑®ÏÜåÌïú Í≤ΩÏö∞ Ï†ÄÏû•ÏÜå Ï¥àÍ∏∞Ìôî
    func resetAppoint() {
        appointName = ""
        menuName = ""
        pickedDate = Date()
        placeName = ""
        note = ""
        pickedFriends = []
        pickedCard = ""
    }
    
    // MARK: - ÎîîÎ≤ÑÍ∑∏Î•º ÏúÑÌïú ÏïΩÏÜçÏû°Í∏∞ ÏûÑÏãúÏ†ÄÏû• Îç∞Ïù¥ÌÑ∞ Ï∂úÎ†•
    func printingForDebug() {
        print(appointName)
        print(menuName)
        print(pickedDate)
        print(placeName)
        print(note)
        print(pickedFriends)
        print(pickedCard)
    }
}

